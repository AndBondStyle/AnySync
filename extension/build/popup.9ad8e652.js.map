{"version":3,"sources":["../node_modules/clipboard-copy/index.js","popup/popup.js"],"names":["url","peerButton","statusButton","mainButton","status","copying","init","document","querySelector","onclick","copy","peer","setInterval","chrome","runtime","sendMessage","update","text","innerText","setTimeout","newstatus","capturing","current","classList","add","remove","count","window","addEventListener"],"mappings":";AAEA,SAAA,EAAA,GAGA,GAAA,UAAA,UACA,OAAA,UAAA,UAAA,UAAA,GAMA,IAAA,EAAA,SAAA,cAAA,QACA,EAAA,YAAA,EAGA,EAAA,MAAA,WAAA,MAGA,SAAA,KAAA,YAAA,GAGA,IAAA,EAAA,OAAA,eACA,EAAA,OAAA,SAAA,cACA,EAAA,kBACA,EAAA,WAAA,GACA,EAAA,SAAA,GAGA,IAAA,GAAA,EACA,IACA,EAAA,OAAA,SAAA,YAAA,QACA,MAAA,GACA,QAAA,IAAA,QAAA,GASA,OALA,EAAA,kBACA,OAAA,SAAA,KAAA,YAAA,GAIA,EACA,QAAA,UACA,QAAA,SA5CA,OAAA,QAAA;;ACgDC,aAhDD,IAAA,EAAA,EAAA,QAAA,mBAgDC,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA9CD,IAAMA,EAAM,kCAERC,EAAa,KACbC,EAAe,KACfC,EAAa,KACbC,EAAS,KACTC,GAAU,EAId,SAASC,IACLL,EAAaM,SAASC,cAAc,SACpCN,EAAeK,SAASC,cAAc,WACtCL,EAAaI,SAASC,cAAc,WACpCP,EAAWQ,QAAU,WAAMC,OAAAA,EAAKV,EAAMI,EAAOO,OAC7CC,YAAY,WAAMC,OAAAA,OAAOC,QAAQC,YAAY,SAAUC,IAAS,KAChEH,OAAOC,QAAQC,YAAY,SAAUC,GAGzC,SAASN,EAAKO,GACVZ,GAAU,EACVJ,EAAWiB,UAAY,qBACnBD,IAAM,EAAeA,EAAAA,SAAAA,GACzBE,WAAW,WAAMd,OAAAA,GAAU,GAAO,KAGtC,SAASW,EAAOI,GACZhB,EAASgB,EACJf,IAASJ,EAAWiB,UAAY,aAAed,EAAOO,MACvDP,EAAOiB,WAAajB,EAAOkB,SAC3BnB,EAAWe,UAAY,cACvBf,EAAWoB,UAAUC,IAAI,UACzBrB,EAAWM,QAAU,WAAMI,OAAAA,OAAOC,QAAQC,YAAY,cAEtDZ,EAAWe,UAAY,cACvBf,EAAWoB,UAAUE,OAAO,UAC5BtB,EAAWM,QAAU,WAAMI,OAAAA,OAAOC,QAAQC,YAAY,aAEtDX,EAAOiB,WACPnB,EAAagB,UAAY,oBACzBhB,EAAaqB,UAAUC,IAAI,YAE3BtB,EAAagB,UAAY,eACzBhB,EAAaqB,UAAUE,OAAO,WAElCvB,EAAagB,WAAa,KAAOd,EAAOsB,MAAQ,IArCpDC,OAAOC,iBAAiB,OAAQtB","file":"popup.9ad8e652.js","sourceRoot":"..","sourcesContent":["module.exports = clipboardCopy\n\nfunction clipboardCopy (text) {\n  // Use the Async Clipboard API when available. Requires a secure browing\n  // context (i.e. HTTPS)\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(text)\n  }\n\n  // ...Otherwise, use document.execCommand() fallback\n\n  // Put the text to copy into a <span>\n  var span = document.createElement('span')\n  span.textContent = text\n\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre'\n\n  // Add the <span> to the page\n  document.body.appendChild(span)\n\n  // Make a selection object representing the range of text selected by the user\n  var selection = window.getSelection()\n  var range = window.document.createRange()\n  selection.removeAllRanges()\n  range.selectNode(span)\n  selection.addRange(range)\n\n  // Copy text to the clipboard\n  var success = false\n  try {\n    success = window.document.execCommand('copy')\n  } catch (err) {\n    console.log('error', err)\n  }\n\n  // Cleanup\n  selection.removeAllRanges()\n  window.document.body.removeChild(span)\n\n  // The Async Clipboard API returns a promise that may reject with `undefined`\n  // so we match that here for consistency.\n  return success\n    ? Promise.resolve()\n    : Promise.reject() // eslint-disable-line prefer-promise-reject-errors\n}\n","import copy2clipboard from 'clipboard-copy';\r\n\r\nconst url = 'https://anysync.herokuapp.com/?';\r\n\r\nlet peerButton = null;   // PEER ID BUTTON\r\nlet statusButton = null; // STATUS BUTTON\r\nlet mainButton = null;   // MAIN ACTION BUTTON\r\nlet status = null;       // LAST STATUS OBJECT\r\nlet copying = false;     // COPYING INDICATOR\r\n\r\nwindow.addEventListener('load', init);\r\n\r\nfunction init() {\r\n    peerButton = document.querySelector('#peer');\r\n    statusButton = document.querySelector('#status');\r\n    mainButton = document.querySelector('#button');\r\n    peerButton.onclick = () => copy(url + status.peer);\r\n    setInterval(() => chrome.runtime.sendMessage('status', update), 500);\r\n    chrome.runtime.sendMessage('status', update);\r\n}\r\n\r\nfunction copy(text) {\r\n    copying = true;\r\n    peerButton.innerText = '<<< URL COPIED >>>';\r\n    if (text) copy2clipboard(text);\r\n    setTimeout(() => copying = false, 1000);\r\n}\r\n\r\nfunction update(newstatus) {\r\n    status = newstatus;\r\n    if (!copying) peerButton.innerText = 'PARTY ID: ' + status.peer;\r\n    if (status.capturing && status.current) {\r\n        mainButton.innerText = 'RELEASE TAB';\r\n        mainButton.classList.add('active');\r\n        mainButton.onclick = () => chrome.runtime.sendMessage('release');\r\n    } else {\r\n        mainButton.innerText = 'CAPTURE TAB';\r\n        mainButton.classList.remove('active');\r\n        mainButton.onclick = () => chrome.runtime.sendMessage('capture');\r\n    }\r\n    if (status.capturing) {\r\n        statusButton.innerText = 'STATUS: CAPTURING';\r\n        statusButton.classList.add('danger');\r\n    } else {\r\n        statusButton.innerText = 'STATUS: IDLE';\r\n        statusButton.classList.remove('danger');\r\n    }\r\n    statusButton.innerText += ' (' + status.count + ')';\r\n}\r\n"]}